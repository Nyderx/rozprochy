# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: hospital.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='hospital.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x0ehospital.proto\"\x1f\n\x0cPatientQuery\x12\x0f\n\x07patient\x18\x01 \x01(\t\"C\n\x0b\x44octorQuery\x12\x0f\n\x07patient\x18\x01 \x01(\t\x12#\n\x10rowsRequirements\x18\x02 \x03(\x0b\x32\t.RowQuery\"2\n\x08RowQuery\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0b\n\x03min\x18\x02 \x01(\x05\x12\x0b\n\x03max\x18\x03 \x01(\x05\"\"\n\x0f\x42ooleanResponse\x12\x0f\n\x07success\x18\x01 \x01(\x08\"6\n\tResultRow\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\x05\x12\x0c\n\x04unit\x18\x03 \x01(\t\"?\n\x0fResultRowsGroup\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x1e\n\nresultRows\x18\x02 \x03(\x0b\x32\n.ResultRow\"j\n\rResultsRecord\x12\x0e\n\x06\x64octor\x18\x01 \x01(\t\x12\x0f\n\x07patient\x18\x02 \x01(\t\x12\x0c\n\x04\x64\x61te\x18\x03 \x01(\t\x12*\n\x10resultRowsGroups\x18\x04 \x03(\x0b\x32\x10.ResultRowsGroup2=\n\x0ePatientService\x12+\n\x06GetAll\x12\r.PatientQuery\x1a\x0e.ResultsRecord\"\x00\x30\x01\x32;\n\rDoctorService\x12*\n\x06GetAll\x12\x0c.DoctorQuery\x1a\x0e.ResultsRecord\"\x00\x30\x01\x32=\n\nLabService\x12/\n\tAddResult\x12\x0e.ResultsRecord\x1a\x10.BooleanResponse\"\x00\x42\x12\n\x08lab4.genP\x01\xa2\x02\x03RPCb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_PATIENTQUERY = _descriptor.Descriptor(
  name='PatientQuery',
  full_name='PatientQuery',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='patient', full_name='PatientQuery.patient', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=18,
  serialized_end=49,
)


_DOCTORQUERY = _descriptor.Descriptor(
  name='DoctorQuery',
  full_name='DoctorQuery',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='patient', full_name='DoctorQuery.patient', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='rowsRequirements', full_name='DoctorQuery.rowsRequirements', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=51,
  serialized_end=118,
)


_ROWQUERY = _descriptor.Descriptor(
  name='RowQuery',
  full_name='RowQuery',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='RowQuery.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='min', full_name='RowQuery.min', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max', full_name='RowQuery.max', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=120,
  serialized_end=170,
)


_BOOLEANRESPONSE = _descriptor.Descriptor(
  name='BooleanResponse',
  full_name='BooleanResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='success', full_name='BooleanResponse.success', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=172,
  serialized_end=206,
)


_RESULTROW = _descriptor.Descriptor(
  name='ResultRow',
  full_name='ResultRow',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='ResultRow.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='ResultRow.value', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='unit', full_name='ResultRow.unit', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=208,
  serialized_end=262,
)


_RESULTROWSGROUP = _descriptor.Descriptor(
  name='ResultRowsGroup',
  full_name='ResultRowsGroup',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='ResultRowsGroup.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='resultRows', full_name='ResultRowsGroup.resultRows', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=264,
  serialized_end=327,
)


_RESULTSRECORD = _descriptor.Descriptor(
  name='ResultsRecord',
  full_name='ResultsRecord',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='doctor', full_name='ResultsRecord.doctor', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='patient', full_name='ResultsRecord.patient', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='date', full_name='ResultsRecord.date', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='resultRowsGroups', full_name='ResultsRecord.resultRowsGroups', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=329,
  serialized_end=435,
)

_DOCTORQUERY.fields_by_name['rowsRequirements'].message_type = _ROWQUERY
_RESULTROWSGROUP.fields_by_name['resultRows'].message_type = _RESULTROW
_RESULTSRECORD.fields_by_name['resultRowsGroups'].message_type = _RESULTROWSGROUP
DESCRIPTOR.message_types_by_name['PatientQuery'] = _PATIENTQUERY
DESCRIPTOR.message_types_by_name['DoctorQuery'] = _DOCTORQUERY
DESCRIPTOR.message_types_by_name['RowQuery'] = _ROWQUERY
DESCRIPTOR.message_types_by_name['BooleanResponse'] = _BOOLEANRESPONSE
DESCRIPTOR.message_types_by_name['ResultRow'] = _RESULTROW
DESCRIPTOR.message_types_by_name['ResultRowsGroup'] = _RESULTROWSGROUP
DESCRIPTOR.message_types_by_name['ResultsRecord'] = _RESULTSRECORD

PatientQuery = _reflection.GeneratedProtocolMessageType('PatientQuery', (_message.Message,), dict(
  DESCRIPTOR = _PATIENTQUERY,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:PatientQuery)
  ))
_sym_db.RegisterMessage(PatientQuery)

DoctorQuery = _reflection.GeneratedProtocolMessageType('DoctorQuery', (_message.Message,), dict(
  DESCRIPTOR = _DOCTORQUERY,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:DoctorQuery)
  ))
_sym_db.RegisterMessage(DoctorQuery)

RowQuery = _reflection.GeneratedProtocolMessageType('RowQuery', (_message.Message,), dict(
  DESCRIPTOR = _ROWQUERY,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:RowQuery)
  ))
_sym_db.RegisterMessage(RowQuery)

BooleanResponse = _reflection.GeneratedProtocolMessageType('BooleanResponse', (_message.Message,), dict(
  DESCRIPTOR = _BOOLEANRESPONSE,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:BooleanResponse)
  ))
_sym_db.RegisterMessage(BooleanResponse)

ResultRow = _reflection.GeneratedProtocolMessageType('ResultRow', (_message.Message,), dict(
  DESCRIPTOR = _RESULTROW,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:ResultRow)
  ))
_sym_db.RegisterMessage(ResultRow)

ResultRowsGroup = _reflection.GeneratedProtocolMessageType('ResultRowsGroup', (_message.Message,), dict(
  DESCRIPTOR = _RESULTROWSGROUP,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:ResultRowsGroup)
  ))
_sym_db.RegisterMessage(ResultRowsGroup)

ResultsRecord = _reflection.GeneratedProtocolMessageType('ResultsRecord', (_message.Message,), dict(
  DESCRIPTOR = _RESULTSRECORD,
  __module__ = 'hospital_pb2'
  # @@protoc_insertion_point(class_scope:ResultsRecord)
  ))
_sym_db.RegisterMessage(ResultsRecord)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\010lab4.genP\001\242\002\003RPC'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class PatientServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetAll = channel.unary_stream(
          '/PatientService/GetAll',
          request_serializer=PatientQuery.SerializeToString,
          response_deserializer=ResultsRecord.FromString,
          )


  class PatientServiceServicer(object):

    def GetAll(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_PatientServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetAll': grpc.unary_stream_rpc_method_handler(
            servicer.GetAll,
            request_deserializer=PatientQuery.FromString,
            response_serializer=ResultsRecord.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'PatientService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class DoctorServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetAll = channel.unary_stream(
          '/DoctorService/GetAll',
          request_serializer=DoctorQuery.SerializeToString,
          response_deserializer=ResultsRecord.FromString,
          )


  class DoctorServiceServicer(object):

    def GetAll(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_DoctorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetAll': grpc.unary_stream_rpc_method_handler(
            servicer.GetAll,
            request_deserializer=DoctorQuery.FromString,
            response_serializer=ResultsRecord.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'DoctorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class LabServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.AddResult = channel.unary_unary(
          '/LabService/AddResult',
          request_serializer=ResultsRecord.SerializeToString,
          response_deserializer=BooleanResponse.FromString,
          )


  class LabServiceServicer(object):

    def AddResult(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_LabServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'AddResult': grpc.unary_unary_rpc_method_handler(
            servicer.AddResult,
            request_deserializer=ResultsRecord.FromString,
            response_serializer=BooleanResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'LabService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaPatientServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def GetAll(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaPatientServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def GetAll(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()


  def beta_create_PatientService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('PatientService', 'GetAll'): PatientQuery.FromString,
    }
    response_serializers = {
      ('PatientService', 'GetAll'): ResultsRecord.SerializeToString,
    }
    method_implementations = {
      ('PatientService', 'GetAll'): face_utilities.unary_stream_inline(servicer.GetAll),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_PatientService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('PatientService', 'GetAll'): PatientQuery.SerializeToString,
    }
    response_deserializers = {
      ('PatientService', 'GetAll'): ResultsRecord.FromString,
    }
    cardinalities = {
      'GetAll': cardinality.Cardinality.UNARY_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'PatientService', cardinalities, options=stub_options)


  class BetaDoctorServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def GetAll(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaDoctorServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def GetAll(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()


  def beta_create_DoctorService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('DoctorService', 'GetAll'): DoctorQuery.FromString,
    }
    response_serializers = {
      ('DoctorService', 'GetAll'): ResultsRecord.SerializeToString,
    }
    method_implementations = {
      ('DoctorService', 'GetAll'): face_utilities.unary_stream_inline(servicer.GetAll),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_DoctorService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('DoctorService', 'GetAll'): DoctorQuery.SerializeToString,
    }
    response_deserializers = {
      ('DoctorService', 'GetAll'): ResultsRecord.FromString,
    }
    cardinalities = {
      'GetAll': cardinality.Cardinality.UNARY_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'DoctorService', cardinalities, options=stub_options)


  class BetaLabServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def AddResult(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaLabServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def AddResult(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    AddResult.future = None


  def beta_create_LabService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('LabService', 'AddResult'): ResultsRecord.FromString,
    }
    response_serializers = {
      ('LabService', 'AddResult'): BooleanResponse.SerializeToString,
    }
    method_implementations = {
      ('LabService', 'AddResult'): face_utilities.unary_unary_inline(servicer.AddResult),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_LabService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('LabService', 'AddResult'): ResultsRecord.SerializeToString,
    }
    response_deserializers = {
      ('LabService', 'AddResult'): BooleanResponse.FromString,
    }
    cardinalities = {
      'AddResult': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'LabService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
